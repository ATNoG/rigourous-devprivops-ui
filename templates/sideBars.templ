package templates

import "fmt"

type SideBarListElement struct {
	Text string
	Link string
}

type InputType string

const (
	TEXT     InputType = "text"
	RADIO              = "radio"
	CHECKBOX           = "checkbox"
	SUBMIT             = "submit"
	BUTTON             = "button"
)

func (input InputType) String() string {
	switch input {
	case TEXT:
		return "text"
	case RADIO:
		return "radio"
	case CHECKBOX:
		return "checkbox"
	case SUBMIT:
		return "submit"
	case BUTTON:
		return "button"
	}

	return ""
}

type SideBarFormElement struct {
	Type    InputType // The input type
	Id      string    // The HTML id of the field
	Label   string    // The label text
	Default string    // The default value of the field
}

templ SideBarList(elements []SideBarListElement) {
	<ul>
		for _, e := range elements {
			<li><a href={ templ.SafeURL(e.Link) }>{ e.Text }</a></li>
		}
	</ul>
}

templ SideBarForm(endpoint string, elements ...SideBarFormElement) {
	<form action={ templ.SafeURL(endpoint) }>
		<ul>
			for _, e := range elements {
				<li class="grid grid-cols-2 mb-2">
					<label for={ e.Id }>{ e.Label }</label>
					<input class="text-slate-400" id={ e.Id } type={ e.Type.String() } name={ e.Id } value={ e.Default }/>
				</li>
			}
		</ul>
		<input class="mt-10" type="submit" value="Submit"/>
	</form>
}

templ FileList(baseURL string, baseDir string, files []SideBarListElement) {
	/*
	<ul>
		for _, e := range files {
			<li><a href={ templ.SafeURL(e.Link) }>{ e.Text }</a></li>
		}
		<li><a href={ templ.SafeURL(createFileEndpoint) }>New File</a></li>
	</ul>
	*/
	// @FileListScript()
	<ul id="fileList">
		for _, e := range files {
			<li class="grid grid-cols-2 mb-2">
				<span><a href={ templ.SafeURL(e.Link) }>{ e.Text }</a> </span>
				// <button onclick={ fmt.Sprintf("deleteFile(this, %s)", fileName) }>Delete</button>
				<button
					class="text-slate-400"
					onclick={ templ.ComponentScript{
					Call: fmt.Sprintf("deleteFile(this, '%s%s')", baseDir, e.Text),
				} }
				>Delete</button>
			</li>
		}
	</ul>
	<div class="mt-10 new-file">
		<input type="text" id="newFileName" placeholder="New file name"/>
		<button
			onclick={ templ.ComponentScript{
			Call: fmt.Sprintf("addFile('%s', '%s')", baseURL, baseDir),
		} }
		>Create</button>
	</div>
	@FileScript()
}

templ RegulationList(baseDir string, files []SideBarListElement) {
	<ul id="fileList">
		for _, e := range files {
			// <li><a href={ templ.SafeURL(e.Link) }>{ e.Text }</a></li>
			<li class="grid grid-cols-2 mb-2">
				<span><a href={ templ.SafeURL(e.Link) }>{ e.Text }</a></span>
				// <button class="text-slate-400" onclick="deleteFile(this, '${baseDir}/${fileName}')">Delete</button>
				<button
					class="text-slate-400"
					onclick={ templ.ComponentScript{
					Call: fmt.Sprintf("deleteFile(this, '%s')", e.Link),
				} }
				>Delete</button>
			</li>
		}
	</ul>
	<div class="mt-5 new-file">
		<input type="text" id="newFileName" placeholder="New regulation name"/>
		<button
			onclick={ templ.ComponentScript{
			Call: fmt.Sprintf("addRegulation('%s')", baseDir),
		} }
		>Add</button>
	</div>
	@FileScript()
}

templ FileScript() {
	<script>
	async function addFile(baseURL, baseDir) {
		const fileNameInput = document.getElementById('newFileName');
		const fileName = fileNameInput.value.trim();

		if (fileName === "") {
			alert("File name cannot be empty!");
			return;
		}

		try {
			const response = await fetch(`/create?path=${encodeURIComponent(baseDir + '/' + fileName)}`,
				{method: 'POST'}
			);
			if (!response.ok) {
				throw new Error('Network response was not ok');
			}

			console.log(`'${baseURL}' '${fileName}'`)
			const fileList = document.getElementById('fileList');
			const li = document.createElement('li');
			li.innerHTML = `
				<span><a href='${baseURL}/${fileName}'>${fileName}</a></span>
				<button onclick="deleteFile(this, '${baseDir}/${fileName}')">Delete</button>
			`;
			fileList.appendChild(li);

			fileNameInput.value = '';
		} catch (error) {
			console.error('Error creating file:', error);
			alert('Failed to create file.');
		}
	}
	
	async function addRegulation(baseDir) {
		const fileNameInput = document.getElementById('newFileName');
		const fileName = fileNameInput.value.trim();

		if (fileName === "") {
			alert("Regulation name cannot be empty!");
			return;
		}

		try {
			const response = await fetch(`/create-regulation?path=${encodeURIComponent(baseDir + '/' + fileName)}`,
				{method: 'POST'}
			);
			if (!response.ok) {
				throw new Error('Network response was not ok');
			}

			const fileList = document.getElementById('fileList');
			const li = document.createElement('li');
			/*
			li.innerHTML = `
				<span>${fileName}</span>
				<button onclick="deleteRegulation(this, '${fileName}')">Delete</button>
			`;
			*/
			li.innerHTML = `
				<span><a href='/regulations/${fileName}'>${fileName}</a></span>
				<button class="text-slate-400" onclick="deleteFile(this, '${baseDir}/${fileName}')">Delete</button>
			`;
			li.classList.add("grid", "grid-cols-2", "mb-2")
			fileList.appendChild(li);

			fileNameInput.value = '';
		} catch (error) {
			console.error('Error creating file:', error);
			alert('Failed to create file.');
		}
	}

	async function deleteFile(button, fileName) {
		try {
			const response = await fetch(`/delete?path=${encodeURIComponent(fileName)}`,
				{method: 'POST'}
			);
			if (!response.ok) {
				throw new Error('Network response was not ok');
			}

			const li = button.parentElement;
			li.remove();
		} catch (error) {
			console.error('Error deleting file:', error);
			alert('Failed to delete file.');
		}
	}
	
	async function deleteRegulation(button, fileName) {
		try {
			const response = await fetch(`/delete-regulation?path=${encodeURIComponent(fileName)}`,
				{method: 'POST'}
			);
			if (!response.ok) {
				throw new Error('Network response was not ok');
			}

			const li = button.parentElement;
			li.remove();
		} catch (error) {
			console.error('Error deleting file:', error);
			alert('Failed to delete file.');
		}
	}
	</script>
}

templ VerticalList(elements ...func() templ.Component) {
	for _, e := range elements {
		@e()
		<br/>
	}
}

templ DescriptionMetadata(endpoint string, currentURI string, extendedCurrentURI string, uriList []string) {
	<form class="mb-5" id="form1" action={ templ.SafeURL(endpoint) }>
		<label class="mr-5" for="uri">URI</label>
		<select name="uri" id="uri">
			for _, s := range uriList {
				if s != currentURI {
					<option value={ s }>{ s }</option>
				} else {
					<option value={ s } selected>{ s }</option>
				}
			}
		</select>
		<br class="mb-5"/>
		<input id="1" type="submit" value="Change URI"/>
	</form>
	<br/>
	<form id="form2" action={ templ.SafeURL(endpoint) }>
		<label for="abreviation">Abreviation</label>
		<br/>
		<input class="text-slate-400" id="abreviation" type="text" name="abreviation" value={ currentURI }/>
		<br class="mb-5"/>
		<label for="new-uri">New URI</label>
		<br/>
		<input class="text-slate-400" id="new-uri" type="text" name="new-uri" value={ extendedCurrentURI }/>
		<br class="mb-5"/>
		<input id="2" type="submit" value="Save Changes"/>
	</form>
}

templ ConflictList(files []SideBarListElement) {
	<ul id="conflictList">
		if len(files) > 0 {
			for _, e := range files {
				<li>
					<span><a href={ templ.SafeURL(e.Link) }>{ e.Text }</a> </span>
				</li>
			}
		} else {
			<p>There are no conflicts </p>
		}
	</ul>
}

templ ConflictSideBar() {
	<ul>
		// <li><button id="pull-btn" type="button">Pull</button></li>
		<li><button id="push-btn" type="button">Push</button></li>
	</ul>
	<script>
		/*
		document.getElementById("pull-btn").addEventListener('click', function() {
		})
		*/
		
		document.getElementById("push-btn").addEventListener('click', function() {
			fetch("/push", {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json'
				},
				body: {}
			})
			.then(response => response.json())
			.then(data => {
				console.log('Success:', data);
			})
			.catch((error) => {
				console.error('Error:', error);
			});
		})
	</script>
}
