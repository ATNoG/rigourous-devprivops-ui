package templates

templ ExtraDataEditor(language string, content string, fileURL string, extraData *string) {
	<div id="editorContainer" class="editor"></div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/js-yaml/4.1.0/js-yaml.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js"></script>
	@EditorScript(language, content, fileURL)


    <div id="extra-data-editor">
       <h1>Object List Creator</h1>
    
        <!-- Container for the list of objects -->
        <div id="object-list"></div>
        
        <!-- Button to add new objects -->
        <button id="add-object-btn" class="add-btn">Add New Object</button>
        
        <!-- Button to save the list -->
        <button id="save-list-btn" class="save-btn">Save List</button> 
    </div>

    <script>
                // Initialize an empty array to hold the objects
        let objects = [];

        // Function to add a new object to the UI
        function addObject(obj = {}) {
            const objectContainer = document.createElement('div');
            objectContainer.className = 'object-container';

            objectContainer.innerHTML = `
                <div class="input-field-container">
                    <label class="input-field-label">Location:</label></br>
                    <input class="w-full" type="text" class="input-field" placeholder="Location" value="${obj.location || ''}" data-key="location">
                </div>
                <div class="input-field-container">
                    <label class="input-field-label">Query:</label></br>
                    <input class="w-full" type="text" class="input-field" placeholder="Query" value="${obj.query || ''}" data-key="query">
                </div>
                <div class="input-field-container">
                    <label class="input-field-label">Heading:</label></br>
                    <input class="w-full" type="text" class="input-field" placeholder="Heading" value="${obj.heading || ''}" data-key="heading">
                </div>
                <div class="input-field-container">
                    <label class="input-field-label">Description:</label></br>
                    <input class="w-full" type="text" class="input-field" placeholder="Description" value="${obj.description || ''}" data-key="description">
                </div>
                <div class="input-field-container">
                    <label class="input-field-label">Data Row Line:</label></br>
                    <input class="w-full" type="text" class="input-field" placeholder="Data Row Line" value="${obj['data row line'] || ''}" data-key="data row line">
                </div>
                <button class="delete-btn" onclick="deleteObject(this)">Delete</button>
            `;
            
            document.getElementById('object-list').appendChild(objectContainer);
            objects.push(obj);
        }

        // Function to delete an object from the UI
        function deleteObject(button) {
            const container = button.parentElement;
            const index = Array.from(container.parentNode.children).indexOf(container);
            objects.splice(index, 1);
            container.remove();
        }

        // Function to save the list of objects as JSON
        function saveList() {
            const data = Array.from(document.querySelectorAll('.object-container')).map(container => {
                const obj = {};
                container.querySelectorAll('input').forEach(input => {
                    obj[input.getAttribute('data-key')] = input.value;
                });
                return obj;
            });

            fetch('/save-report-data', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            }).then(response => {
                if (response.ok) {
                    alert('List saved successfully!');
                } else {
                    alert('Failed to save list.');
                }
            }).catch(error => {
                console.error('Error saving list:', error);
                alert('Error saving list.');
            });
        }

        // Function to populate the UI with objects from a JSON list
        function populateUI(jsonList) {
            // Clear existing UI objects
            document.getElementById('object-list').innerHTML = '';
            objects = [];

            // Add each object from the JSON list to the UI
            jsonList.forEach(obj => addObject(obj));
        }

        // Event listeners
        document.getElementById('add-object-btn').addEventListener('click', () => addObject());
        document.getElementById('save-list-btn').addEventListener('click', saveList);

        // Example usage of populateUI function
        /*
        const exampleJsonList = [
            { location: "Location1", query: "Query1", heading: "Heading1", description: "Description1", "data row line": "DataRowLine1" },
            { location: "Location2", query: "Query2", heading: "Heading2", description: "Description2", "data row line": "DataRowLine2" }
        ];
        populateUI(exampleJsonList);
        */
    </script>

    @ExtraDataInitialization(extraData)
}

script ExtraDataInitialization(extraData *string) {
    console.log(extraData)
    populateUI(JSON.parse(extraData))
}