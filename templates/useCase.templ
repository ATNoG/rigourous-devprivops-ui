package templates

import "net/url"
import "fmt"
import "github.com/Joao-Felisberto/devprivops-ui/objects"

/*
type UseCase struct {
    UseCase string              `json:"use case"`
    IsMisuseCase bool           `json:"is misuse case"`
    Requirements []Requirement  `json:"requirements"`
}

type Requirement struct {
    Title string        `json:"title"`
    Description string  `json:"description"`
    Query string        `json:"query"`
}
*/

templ UCSideBar(useCases *[]objects.UseCase) {
    <ul id="use-case-list">
        for _, uc := range *useCases {
            <li> 
                <li><a href="/requirements">{uc.UseCase}</a></li>
                <ul>
                    for _, requirement := range uc.Requirements {
                        <li><a href={templ.SafeURL(fmt.Sprintf("/requirements/%s", url.PathEscape(requirement.Query)))}>{requirement.Title}</a></li>
                    }
                </ul>
            </li>
        }
    </ul>

	<div class="new-file">
		<input type="text" id="new-use-case" placeholder="New use case name"/>
		<button onclick="addUseCase()">Create</button>
	</div>

    <script>
	async function addUseCase() {
		const fileNameInput = document.getElementById('new-use-case');
		const fileName = fileNameInput.value.trim();

		if (fileName === "") {
			alert("File name cannot be empty!");
			return;
		}

		try {
			const response = await fetch(`/create?path=${encodeURIComponent('/' + fileName)}`,
				{method: 'POST'}
			);
			if (!response.ok) {
				throw new Error('Network response was not ok');
			}

			console.log(`'${fileName}'`)
			const fileList = document.getElementById('use-case-list');
			const li = document.createElement('li');
			li.innerHTML = `
				<span><a href='/use-cases/${fileName}'>${fileName}</a></span>
				<!--<button onclick="deleteFile(this, '${fileName}')">Delete</button>-->
			`;
			fileList.appendChild(li);

			fileNameInput.value = '';
		} catch (error) {
			console.error('Error creating use case:', error);
			alert('Failed to create use case.');
		}
	}
    </script>
}

templ UCDetails(endpoint string, useCase objects.UseCase, requiremet objects.Requirement) {
	<form action={templ.SafeURL(endpoint)}>
        <p>Use Case</p>
        <label for="uc">Use Case</label>
        <input id="uc" type="text" name="Use Case" value={useCase.UseCase}/>
        
        <label for="misusecase">Is misuse case</label>
        <input id="misusecase" type="select" name="Use Case"/>
		
        <p>Requirement</p>

        <label for="requirement">Requirement</label>
        <input id="requirement" type="text" name="Is misuse case" value={requiremet.Title}/>
        
        <label for="description">Description</label>
        <input id="description" type="text" name="Description" value={requiremet.Description}/>
        
        <input type="submit" value="Save"/>
	</form>
}