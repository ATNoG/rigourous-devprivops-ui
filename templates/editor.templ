package templates

import "html/template"

script EditorScript(language string, content string, fileURL string, convertYAML bool) {
    require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.33.0/min/vs' }});
    require(['vs/editor/editor.main'], function() {
        const editor = monaco.editor.create(document.getElementById('editorContainer'), {
            value: content,
            language: language
        });

		window.editor = editor
		window.editorReady = true;

		// const language = Array.from(editor.languageConfigurationService.configurations.keys())[0]

		document.getElementById('save-btn').addEventListener('click', function(event) {
			event.preventDefault();
			const editorContent = editor.getValue();
			console.log(`Editor for ${language}`);
		
			var body = editorContent
			if (convertYAML && (language === "yaml")) {
				console.log("HERE")
			    const jsonObject = jsyaml.load(editorContent);
                body = JSON.stringify(jsonObject);
			}

			console.log(`Sending the following: ${body}`)

			fetch(fileURL, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json'
				},
				// body: JSON.stringify({ content: editorContent })
				body: body // editorContent
			})
			.then(response => response.json())
			.then(data => {
				console.log('Success:', data);
			})
			.catch((error) => {
				console.error('Error:', error);
			});
		});
    });
}

script DiffEditorScript(language string, original string, modified string, fileURL string) {
    require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.33.0/min/vs' }});
    require(['vs/editor/editor.main'], function() {
		const editor = monaco.editor.createDiffEditor(document.getElementById('editorContainer'), {
			// value: content,
            language: language
        });
		
		// https://microsoft.github.io/monaco-editor/typedoc/interfaces/editor.IStandaloneDiffEditor.html
		editor.setModel({
			original: monaco.editor.createModel(original),
			modified: monaco.editor.createModel(modified),
		});

		window.editor = editor
		window.editorReady = true;

		// const language = Array.from(editor.languageConfigurationService.configurations.keys())[0]

		document.getElementById('save-btn').addEventListener('click', function(event) {
			event.preventDefault();
			const editorContent = editor.getModifiedEditor().getValue();
			console.log(`Editor for ${language}`);
		
			var body = editorContent
			if (language === "yaml") {
				console.log("HERE")
			    const jsonObject = jsyaml.load(editorContent);
                body = JSON.stringify(jsonObject);
			}

			console.log(`Sending the following: ${body}`)

			fetch(fileURL, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json'
				},
				// body: JSON.stringify({ content: editorContent })
				body: body // editorContent
			})
			.then(response => response.json())
			.then(data => {
				console.log('Success:', data);
			})
			.catch((error) => {
				console.error('Error:', error);
			});
		});
    });
}

templ EditorComponent(language string, content string, fileURL string) {
	<div id="editorContainer" class="editor"></div>
	if language == "yaml" {
		<script src="https://cdnjs.cloudflare.com/ajax/libs/js-yaml/4.1.0/js-yaml.min.js"></script>
	}
	<script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js"></script>
	@EditorScript(language, content, fileURL, true)
}

templ DiffEditor(language string, original string, modified string, fileURL string) {
	<div id="editorContainer" class="editor"></div>
	if language == "yaml" {
		<script src="https://cdnjs.cloudflare.com/ajax/libs/js-yaml/4.1.0/js-yaml.min.js"></script>
	}
	<script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js"></script>
	@DiffEditorScript(language, original, modified, fileURL)
}

var wasmMod = template.Must(template.New("example").Parse(`
<script type="module">
		import init, { process, process_and_render } from "{{ . }}";
		window.test_func = alert
		window.newNetwork = (container, data, options) => new vis.Network(container, data, options);

		function waitForEditor() {
            return new Promise((resolve) => {
                const checkEditor = setInterval(() => {
                    if (window.editor && window.editorReady) {
                        clearInterval(checkEditor);
                        resolve(window.editor);
                    }
                }, 100);
            });
        }

		init().then(() => {
			waitForEditor().then((editor) => {
				process_and_render(editor.getValue())
			})
		});
	</script>
`))

templ EditorWithVisualizer(language string, content string, fileURL string, pluginPath string) {
	<div id="editorContainer" class="editor"></div>
	<div id="graphContainer" class="flex-grow p-4 bg-gray-50">
		<div id="mynetwork"></div>
	</div>
	if language == "yaml" {
		<script src="https://cdnjs.cloudflare.com/ajax/libs/js-yaml/4.1.0/js-yaml.min.js"></script>
	}
	<script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js"></script>
	@EditorScript(language, content, fileURL, false)
	
	@templ.FromGoHTML(wasmMod, pluginPath)
}
